// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String?
  authId      String
  goalId      String?
  goal        Goal?         @relation(fields: [goalId], references: [id])
  UserSubject UserSubject[]
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Goal {
  id            String   @id @default(uuid())
  questionCount Int
  refreshTime   DateTime
  streak        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User[]
}

model Subject {
  id          String        @id @default(uuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Topic       Topic[]
  UserSubject UserSubject[]
}

model UserSubject {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
}

model Topic {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  subject   Subject    @relation(fields: [subjectId], references: [id])
  subjectId String
  Question  Question[]
}

model Question {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  Option    Option[]
}

model Option {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}
